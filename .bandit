# Bandit Configuration for Python Security Scanning
# https://bandit.readthedocs.io/en/latest/config.html

[bandit]
# Recursive scan
recursive = true

# Aggregate output by vulnerability type
aggregate = type

# Number of lines to show around a vulnerability
context_lines = 3

# Skip certain directories
exclude_dirs = [
    "tests",
    "test",
    "__pycache__",
    ".git",
    ".tox",
    ".pytest_cache",
    "venv",
    "env",
    "node_modules",
    "dist",
    "build",
    ".claude",
    ".swarm",
    "memory"
]

# Skip certain files
skips = [
    "B101",  # assert_used - asserts are ok in tests
    "B601"   # paramiko_calls - we might use paramiko for legitimate purposes
]

# Tests to run (if not specified, all tests are run)
tests = [
    "B102",  # exec_used
    "B103",  # set_bad_file_permissions
    "B104",  # hardcoded_bind_all_interfaces
    "B105",  # hardcoded_password_string
    "B106",  # hardcoded_password_funcarg
    "B107",  # hardcoded_password_default
    "B108",  # hardcoded_tmp_directory
    "B110",  # try_except_pass
    "B112",  # try_except_continue
    "B201",  # flask_debug_true
    "B301",  # pickle
    "B302",  # marshal
    "B303",  # md5
    "B304",  # des
    "B305",  # cipher
    "B306",  # mktemp_q
    "B307",  # eval
    "B308",  # mark_safe
    "B309",  # httpsconnection
    "B310",  # urllib_urlopen
    "B311",  # random
    "B312",  # telnetlib
    "B313",  # xml_bad_cElementTree
    "B314",  # xml_bad_ElementTree
    "B315",  # xml_bad_expatreader
    "B316",  # xml_bad_expatbuilder
    "B317",  # xml_bad_sax
    "B318",  # xml_bad_minidom
    "B319",  # xml_bad_pulldom
    "B320",  # xml_bad_etree
    "B321",  # ftplib
    "B322",  # input
    "B323",  # unverified_context
    "B324",  # hashlib_new_insecure_functions
    "B325",  # tempnam
    "B401",  # import_telnetlib
    "B402",  # import_ftplib
    "B403",  # import_pickle
    "B404",  # import_subprocess
    "B405",  # import_xml_etree
    "B406",  # import_xml_sax
    "B407",  # import_xml_expat
    "B408",  # import_xml_minidom
    "B409",  # import_xml_pulldom
    "B410",  # import_lxml
    "B411",  # import_xmlrpclib
    "B412",  # import_httpoxy
    "B413",  # import_pycrypto
    "B501",  # request_with_no_cert_validation
    "B502",  # ssl_with_bad_version
    "B503",  # ssl_with_bad_defaults
    "B504",  # ssl_with_no_version
    "B505",  # weak_cryptographic_key
    "B506",  # yaml_load
    "B507",  # ssh_no_host_key_verification
    "B601",  # paramiko_calls
    "B602",  # subprocess_popen_with_shell_equals_true
    "B603",  # subprocess_without_shell_equals_false
    "B604",  # any_other_function_with_shell_equals_true
    "B605",  # start_process_with_a_shell
    "B606",  # start_process_with_no_shell
    "B607",  # start_process_with_partial_path
    "B608",  # hardcoded_sql_expressions
    "B609",  # linux_commands_wildcard_injection
    "B610",  # django_extra_used
    "B611",  # django_rawsql_used
    "B701",  # jinja2_autoescape_false
    "B702",  # use_of_mako_templates
    "B703"   # django_mark_safe
]

# Custom patterns for TopCards specific security concerns
[bandit.patterns]
# Google Cloud specific patterns
google_cloud_key = [
    "service_account_key",
    "private_key_id",
    "client_email"
]

# Terraform related patterns
terraform_secrets = [
    "terraform.tfstate",
    "backend_config",
    "state_file"
]

# Database patterns
database_credentials = [
    "database_url",
    "db_password",
    "connection_string"
]

[bandit.blacklist_calls]
# Additional function calls to flag
bad_name_sets = [
    ["pickle.loads"],
    ["pickle.load"],
    ["marshal.loads"],
    ["marshal.load"],
    ["os.system"],
    ["subprocess.call"],
    ["eval"],
    ["exec"],
    ["compile"]
]

[bandit.blacklist_imports]
# Additional imports to flag
bad_import_sets = [
    ["pickle"],
    ["marshal"],
    ["telnetlib"],
    ["ftplib"]
]

# Severity levels
[bandit.severity]
# Define severity levels for different test types
high = [
    "B102",  # exec_used
    "B105",  # hardcoded_password_string
    "B106",  # hardcoded_password_funcarg
    "B107",  # hardcoded_password_default
    "B301",  # pickle
    "B307",  # eval
    "B501",  # request_with_no_cert_validation
    "B602",  # subprocess_popen_with_shell_equals_true
    "B608"   # hardcoded_sql_expressions
]

medium = [
    "B103",  # set_bad_file_permissions
    "B104",  # hardcoded_bind_all_interfaces
    "B108",  # hardcoded_tmp_directory
    "B201",  # flask_debug_true
    "B302",  # marshal
    "B303",  # md5
    "B304",  # des
    "B305",  # cipher
    "B309",  # httpsconnection
    "B310",  # urllib_urlopen
    "B311",  # random
    "B312",  # telnetlib
    "B321",  # ftplib
    "B322",  # input
    "B323",  # unverified_context
    "B324",  # hashlib_new_insecure_functions
    "B502",  # ssl_with_bad_version
    "B503",  # ssl_with_bad_defaults
    "B504",  # ssl_with_no_version
    "B505",  # weak_cryptographic_key
    "B506",  # yaml_load
    "B507"   # ssh_no_host_key_verification
]

low = [
    "B110",  # try_except_pass
    "B112",  # try_except_continue
    "B306",  # mktemp_q
    "B308",  # mark_safe
    "B325",  # tempnam
    "B603",  # subprocess_without_shell_equals_false
    "B604",  # any_other_function_with_shell_equals_true
    "B605",  # start_process_with_a_shell
    "B606",  # start_process_with_no_shell
    "B607",  # start_process_with_partial_path
    "B609",  # linux_commands_wildcard_injection
    "B610",  # django_extra_used
    "B611",  # django_rawsql_used
    "B701",  # jinja2_autoescape_false
    "B702",  # use_of_mako_templates
    "B703"   # django_mark_safe
]

# Confidence levels
[bandit.confidence]
# Define confidence levels for different test types
high = [
    "B105",  # hardcoded_password_string
    "B106",  # hardcoded_password_funcarg
    "B107",  # hardcoded_password_default
    "B501",  # request_with_no_cert_validation
    "B608"   # hardcoded_sql_expressions
]

medium = [
    "B102",  # exec_used
    "B301",  # pickle
    "B307",  # eval
    "B602"   # subprocess_popen_with_shell_equals_true
]

# Plugin configuration
[bandit.plugins]
# Enable/disable specific plugins
enabled = [
    "assert_used",
    "exec_used",
    "hardcoded_bind_all_interfaces",
    "hardcoded_password",
    "hardcoded_tmp_directory",
    "request_with_no_cert_validation",
    "subprocess_popen_with_shell_equals_true",
    "yaml_load"
]

# Formatter configuration
[bandit.formatters]
# Output format preferences
csv = {
    "include_paths": true,
    "include_line_ranges": true
}

json = {
    "include_paths": true,
    "pretty_print": true
}

txt = {
    "include_paths": true,
    "show_source": true,
    "show_lineno": true
}