# Semgrep Configuration for TopCards Security
# https://semgrep.dev/docs/

# Include default rulesets
rules:
  # Security rules
  - auto

  # OWASP Top 10 rules
  - p/owasp-top-ten

  # Security-specific rulesets
  - p/security-audit
  - p/secrets
  - p/jwt
  - p/sql-injection
  - p/xss
  - p/command-injection
  - p/path-traversal
  - p/insecure-transport
  - p/hardcoded-secrets

  # Language-specific security rules
  - p/javascript
  - p/typescript
  - p/python
  - p/bash
  - p/yaml
  - p/dockerfile
  - p/terraform

  # Cloud provider specific rules
  - p/gcp
  - p/aws
  - p/azure
  - p/kubernetes

  # CI/CD security rules
  - p/github-actions
  - p/gitlab
  - p/circleci

  # Infrastructure as Code
  - p/terraform
  - p/cloudformation

# Paths to scan
include:
  - "*.js"
  - "*.ts"
  - "*.jsx"
  - "*.tsx"
  - "*.py"
  - "*.sh"
  - "*.bash"
  - "*.tf"
  - "*.yml"
  - "*.yaml"
  - "*.json"
  - "*.dockerfile"
  - "Dockerfile*"
  - "*.hcl"

# Paths to exclude
exclude:
  - "node_modules/"
  - "venv/"
  - "__pycache__/"
  - ".git/"
  - ".terraform/"
  - "terraform.tfstate*"
  - "dist/"
  - "build/"
  - "coverage/"
  - ".nyc_output/"
  - "*.min.js"
  - "*.min.css"
  - "*.map"
  - ".claude/"
  - ".swarm/"
  - "memory/"
  - ".pytest_cache/"
  - ".mypy_cache/"
  - ".tox/"
  - "*.log"
  - "logs/"
  - "*.backup"
  - "*.bak"
  - "*.tmp"
  - "test-results/"
  - "playwright-report/"

# Custom rules for TopCards project
custom_rules:
  # Google Cloud specific patterns
  - id: hardcoded-gcp-key
    patterns:
      - pattern: '"type": "service_account"'
      - pattern: '"private_key": "$VALUE"'
    message: "Hardcoded Google Cloud service account key detected"
    languages: [json]
    severity: ERROR

  - id: hardcoded-project-id
    patterns:
      - pattern: project_id = "$VALUE"
      - metavariable-regex:
          metavariable: $VALUE
          regex: '^[a-z][a-z0-9-]{4,28}[a-z0-9]$'
    message: "Hardcoded Google Cloud project ID"
    languages: [hcl]
    severity: WARNING

  # Terraform security patterns
  - id: terraform-unencrypted-disk
    patterns:
      - pattern: |
          resource "google_compute_disk" "$NAME" {
            ...
          }
      - pattern-not: |
          resource "google_compute_disk" "$NAME" {
            ...
            disk_encryption_key {
              ...
            }
            ...
          }
    message: "Google Compute Disk should use encryption"
    languages: [hcl]
    severity: WARNING

  - id: terraform-public-ip
    patterns:
      - pattern: |
          resource "google_compute_instance" "$NAME" {
            ...
            network_interface {
              ...
              access_config {
                ...
              }
              ...
            }
            ...
          }
    message: "Google Compute Instance has public IP access"
    languages: [hcl]
    severity: INFO

  # Secret patterns
  - id: potential-api-key
    patterns:
      - pattern-regex: '(?i)(api[_-]?key|apikey)\s*[=:]\s*["\'][a-zA-Z0-9]{20,}["\']'
    message: "Potential API key detected"
    languages: [javascript, typescript, python, bash, yaml]
    severity: ERROR

  - id: potential-password
    patterns:
      - pattern-regex: '(?i)(password|passwd|pwd)\s*[=:]\s*["\'][^"\']{8,}["\']'
    message: "Potential hardcoded password"
    languages: [javascript, typescript, python, bash, yaml]
    severity: ERROR

  - id: potential-token
    patterns:
      - pattern-regex: '(?i)(token|auth[_-]?token)\s*[=:]\s*["\'][a-zA-Z0-9]{20,}["\']'
    message: "Potential authentication token"
    languages: [javascript, typescript, python, bash, yaml]
    severity: ERROR

  # GitHub Actions security patterns
  - id: github-actions-shell-injection
    patterns:
      - pattern: run: $CMD
      - metavariable-regex:
          metavariable: $CMD
          regex: '.*\$\{\{.*\}\}.*'
    message: "Potential shell injection in GitHub Actions"
    languages: [yaml]
    paths:
      include:
        - ".github/workflows/*.yml"
        - ".github/workflows/*.yaml"
    severity: ERROR

  - id: github-actions-write-permissions
    patterns:
      - pattern: |
          permissions:
            ...
            contents: write
            ...
    message: "GitHub Actions workflow has write permissions"
    languages: [yaml]
    paths:
      include:
        - ".github/workflows/*.yml"
        - ".github/workflows/*.yaml"
    severity: WARNING

  # JavaScript/TypeScript security patterns
  - id: eval-usage
    patterns:
      - pattern: eval($ARG)
    message: "Use of eval() is dangerous and should be avoided"
    languages: [javascript, typescript]
    severity: ERROR

  - id: dangerous-innerHTML
    patterns:
      - pattern: $ELEMENT.innerHTML = $VAR
    message: "Direct assignment to innerHTML can lead to XSS"
    languages: [javascript, typescript]
    severity: WARNING

  # Python security patterns
  - id: python-exec-usage
    patterns:
      - pattern: exec($ARG)
    message: "Use of exec() can be dangerous"
    languages: [python]
    severity: WARNING

  - id: python-subprocess-shell
    patterns:
      - pattern: subprocess.$FUNC(..., shell=True, ...)
    message: "subprocess with shell=True can be dangerous"
    languages: [python]
    severity: WARNING

  # Bash security patterns
  - id: bash-curl-insecure
    patterns:
      - pattern-regex: 'curl\s+.*-k\s+.*'
      - pattern-regex: 'curl\s+.*--insecure\s+.*'
    message: "curl with insecure flag (-k/--insecure) detected"
    languages: [bash]
    severity: WARNING

  - id: bash-wget-insecure
    patterns:
      - pattern-regex: 'wget\s+.*--no-check-certificate\s+.*'
    message: "wget with --no-check-certificate detected"
    languages: [bash]
    severity: WARNING

  # Docker security patterns
  - id: dockerfile-run-as-root
    patterns:
      - pattern-regex: '^USER\s+root\s*$'
      - pattern-regex: '^USER\s+0\s*$'
    message: "Running container as root user"
    languages: [dockerfile]
    severity: WARNING

  - id: dockerfile-latest-tag
    patterns:
      - pattern-regex: 'FROM\s+[^:]+:latest'
    message: "Using :latest tag in Dockerfile"
    languages: [dockerfile]
    severity: INFO

# Severity configuration
severity:
  # Map Semgrep severities to custom levels
  ERROR: error
  WARNING: warning
  INFO: info

# Output configuration
output:
  # Default output format
  format: auto

  # Verbose output for debugging
  verbose: false

  # Show timing information
  time: false

  # Show rules being used
  debug: false

# Performance configuration
performance:
  # Maximum number of characters to read per file
  max_chars_per_file: 1000000

  # Maximum execution time per rule per file (seconds)
  max_timeout: 30

  # Enable parallel processing
  jobs: auto

# Experimental features
experimental:
  # Enable new analysis features
  enable_experimental_rules: false

  # Enable better performance optimizations
  enable_optimizations: true