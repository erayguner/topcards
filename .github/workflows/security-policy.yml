name: Security Policy Enforcement

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  dependency-check:
    name: 'OWASP Dependency Check'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'topcards'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7

    - name: Upload Dependency Check results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/

  license-check:
    name: 'License Compliance Check'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Node.js
      if: hashFiles('package.json') != ''
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install license-checker
      if: hashFiles('package.json') != ''
      run: npm install -g license-checker

    - name: Check Node.js licenses
      if: hashFiles('package.json') != ''
      run: |
        npm install
        license-checker --onlyAllow 'MIT;BSD;ISC;Apache-2.0;Unlicense;WTFPL' --excludePrivatePackages

    - name: Set up Python
      if: hashFiles('requirements.txt') != '' || hashFiles('Pipfile') != ''
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Check Python licenses
      if: hashFiles('requirements.txt') != '' || hashFiles('Pipfile') != ''
      run: |
        pip install pip-licenses
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        pip-licenses --allow-only="MIT License;BSD License;Apache Software License;ISC License"

  code-quality:
    name: 'CodeQL Security Analysis'
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python' ]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  container-security:
    name: 'Container Security Scan'
    runs-on: ubuntu-latest
    if: hashFiles('Dockerfile*') != ''
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        if [ -f Dockerfile ]; then
          docker build -t security-scan:latest .
        fi

    - name: Run Trivy vulnerability scanner
      if: hashFiles('Dockerfile') != ''
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'security-scan:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      if: hashFiles('Dockerfile') != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  security-scorecard:
    name: 'OSSF Scorecard'
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
      actions: read
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Run analysis
      uses: ossf/scorecard-action@v2.3.1
      with:
        results_file: results.sarif
        results_format: sarif
        publish_results: true

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: SARIF file
        path: results.sarif
        retention-days: 5

    - name: Upload to code-scanning
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif