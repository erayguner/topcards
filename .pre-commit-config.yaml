# Pre-commit hooks configuration for TopCards Security
# https://pre-commit.com/

repos:
  # General code quality
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: mixed-line-ending
        args: [--fix=lf]
      - id: fix-byte-order-marker

  # Security scanning hooks
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.4
    hooks:
      - id: gitleaks

  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: package-lock\.json

  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ['-c', '.bandit', '-r']
        files: \.py$

  - repo: https://github.com/semgrep/semgrep
    rev: v1.45.0
    hooks:
      - id: semgrep
        args: ['--config=auto', '--error']

  # Python security and quality
  - repo: https://github.com/PyCQA/safety
    rev: 2.3.5
    hooks:
      - id: safety
        args: [--ignore=70612]  # Ignore known false positives

  # Infrastructure as Code security
  - repo: https://github.com/bridgecrewio/checkov
    rev: 3.0.25
    hooks:
      - id: checkov
        args: [--framework, terraform, --framework, dockerfile, --framework, yaml]
        files: \.(tf|dockerfile|ya?ml)$

  - repo: https://github.com/aquasecurity/tfsec
    rev: v1.28.1
    hooks:
      - id: tfsec
        args: [--format, sarif, --soft-fail]
        files: \.tf$

  # JavaScript/TypeScript security
  - repo: https://github.com/eslint/eslint
    rev: v8.56.0
    hooks:
      - id: eslint
        files: \.(js|jsx|ts|tsx)$
        args: [--fix, --max-warnings=0]
        additional_dependencies:
          - eslint@8.56.0
          - '@typescript-eslint/parser@6.15.0'
          - '@typescript-eslint/eslint-plugin@6.15.0'
          - eslint-plugin-security@1.7.1

  # Docker security
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.33.0
    hooks:
      - id: yamllint
        args: [-c=.github/configs/yamllint.yml]

  # Shell script security
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        args: [--severity=warning]

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        args: [--fix]

  # Commit message validation
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # License validation
  - repo: local
    hooks:
      - id: check-license-headers
        name: Check License Headers
        entry: scripts/check-license-headers.sh
        language: script
        files: \.(py|js|ts|tf)$
        pass_filenames: true

  # Custom security checks
  - repo: local
    hooks:
      - id: check-terraform-modules
        name: Check Terraform Modules
        entry: scripts/check-terraform-modules.sh
        language: script
        files: \.tf$
        pass_filenames: true

      - id: check-secrets-patterns
        name: Check for Secret Patterns
        entry: scripts/check-secrets-patterns.sh
        language: script
        files: \.(py|js|ts|tf|yml|yaml|json)$
        pass_filenames: true

      - id: validate-github-workflows
        name: Validate GitHub Workflows
        entry: scripts/validate-github-workflows.sh
        language: script
        files: \.github/workflows/.*\.ya?ml$
        pass_filenames: true

      - id: security-policy-check
        name: Security Policy Check
        entry: scripts/security-policy-check.sh
        language: script
        files: ^(SECURITY\.md|\.github/SECURITY\.md)$
        pass_filenames: true

  # Dependency vulnerability scanning
  - repo: local
    hooks:
      - id: audit-dependencies
        name: Audit Dependencies
        entry: scripts/audit-dependencies.sh
        language: script
        files: ^(package\.json|requirements\.txt|Pipfile|pyproject\.toml)$
        pass_filenames: true

  # Container security scanning
  - repo: local
    hooks:
      - id: scan-docker-files
        name: Scan Docker Files
        entry: scripts/scan-docker-files.sh
        language: script
        files: ^(Dockerfile.*|docker-compose\.ya?ml)$
        pass_filenames: true

# Configuration
fail_fast: false
default_stages: [commit, push]

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false